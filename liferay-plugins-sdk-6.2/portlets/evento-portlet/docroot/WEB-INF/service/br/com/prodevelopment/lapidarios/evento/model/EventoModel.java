/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.lapidarios.evento.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Evento service. Represents a row in the &quot;evento&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see Evento
 * @see br.com.prodevelopment.lapidarios.evento.model.impl.EventoImpl
 * @see br.com.prodevelopment.lapidarios.evento.model.impl.EventoModelImpl
 * @generated
 */
public interface EventoModel extends BaseModel<Evento>, StagedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a evento model instance should use the {@link Evento} interface instead.
	 */

	/**
	 * Returns the primary key of this evento.
	 *
	 * @return the primary key of this evento
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this evento.
	 *
	 * @param primaryKey the primary key of this evento
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this evento.
	 *
	 * @return the uuid of this evento
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this evento.
	 *
	 * @param uuid the uuid of this evento
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the evento ID of this evento.
	 *
	 * @return the evento ID of this evento
	 */
	public long getEventoId();

	/**
	 * Sets the evento ID of this evento.
	 *
	 * @param eventoId the evento ID of this evento
	 */
	public void setEventoId(long eventoId);

	/**
	 * Returns the company ID of this evento.
	 *
	 * @return the company ID of this evento
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this evento.
	 *
	 * @param companyId the company ID of this evento
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this evento.
	 *
	 * @return the group ID of this evento
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this evento.
	 *
	 * @param groupId the group ID of this evento
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the create user ID of this evento.
	 *
	 * @return the create user ID of this evento
	 */
	public long getCreateUserId();

	/**
	 * Sets the create user ID of this evento.
	 *
	 * @param createUserId the create user ID of this evento
	 */
	public void setCreateUserId(long createUserId);

	/**
	 * Returns the create user uuid of this evento.
	 *
	 * @return the create user uuid of this evento
	 * @throws SystemException if a system exception occurred
	 */
	public String getCreateUserUuid() throws SystemException;

	/**
	 * Sets the create user uuid of this evento.
	 *
	 * @param createUserUuid the create user uuid of this evento
	 */
	public void setCreateUserUuid(String createUserUuid);

	/**
	 * Returns the modified user ID of this evento.
	 *
	 * @return the modified user ID of this evento
	 */
	public long getModifiedUserId();

	/**
	 * Sets the modified user ID of this evento.
	 *
	 * @param modifiedUserId the modified user ID of this evento
	 */
	public void setModifiedUserId(long modifiedUserId);

	/**
	 * Returns the modified user uuid of this evento.
	 *
	 * @return the modified user uuid of this evento
	 * @throws SystemException if a system exception occurred
	 */
	public String getModifiedUserUuid() throws SystemException;

	/**
	 * Sets the modified user uuid of this evento.
	 *
	 * @param modifiedUserUuid the modified user uuid of this evento
	 */
	public void setModifiedUserUuid(String modifiedUserUuid);

	/**
	 * Returns the create date of this evento.
	 *
	 * @return the create date of this evento
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this evento.
	 *
	 * @param createDate the create date of this evento
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this evento.
	 *
	 * @return the modified date of this evento
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this evento.
	 *
	 * @param modifiedDate the modified date of this evento
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the nome of this evento.
	 *
	 * @return the nome of this evento
	 */
	public String getNome();

	/**
	 * Returns the localized nome of this evento in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized nome of this evento
	 */
	@AutoEscape
	public String getNome(Locale locale);

	/**
	 * Returns the localized nome of this evento in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized nome of this evento. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getNome(Locale locale, boolean useDefault);

	/**
	 * Returns the localized nome of this evento in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized nome of this evento
	 */
	@AutoEscape
	public String getNome(String languageId);

	/**
	 * Returns the localized nome of this evento in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized nome of this evento
	 */
	@AutoEscape
	public String getNome(String languageId, boolean useDefault);

	@AutoEscape
	public String getNomeCurrentLanguageId();

	@AutoEscape
	public String getNomeCurrentValue();

	/**
	 * Returns a map of the locales and localized nomes of this evento.
	 *
	 * @return the locales and localized nomes of this evento
	 */
	public Map<Locale, String> getNomeMap();

	/**
	 * Sets the nome of this evento.
	 *
	 * @param nome the nome of this evento
	 */
	public void setNome(String nome);

	/**
	 * Sets the localized nome of this evento in the language.
	 *
	 * @param nome the localized nome of this evento
	 * @param locale the locale of the language
	 */
	public void setNome(String nome, Locale locale);

	/**
	 * Sets the localized nome of this evento in the language, and sets the default locale.
	 *
	 * @param nome the localized nome of this evento
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setNome(String nome, Locale locale, Locale defaultLocale);

	public void setNomeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized nomes of this evento from the map of locales and localized nomes.
	 *
	 * @param nomeMap the locales and localized nomes of this evento
	 */
	public void setNomeMap(Map<Locale, String> nomeMap);

	/**
	 * Sets the localized nomes of this evento from the map of locales and localized nomes, and sets the default locale.
	 *
	 * @param nomeMap the locales and localized nomes of this evento
	 * @param defaultLocale the default locale
	 */
	public void setNomeMap(Map<Locale, String> nomeMap, Locale defaultLocale);

	/**
	 * Returns the descricao of this evento.
	 *
	 * @return the descricao of this evento
	 */
	public String getDescricao();

	/**
	 * Returns the localized descricao of this evento in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized descricao of this evento
	 */
	@AutoEscape
	public String getDescricao(Locale locale);

	/**
	 * Returns the localized descricao of this evento in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized descricao of this evento. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescricao(Locale locale, boolean useDefault);

	/**
	 * Returns the localized descricao of this evento in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized descricao of this evento
	 */
	@AutoEscape
	public String getDescricao(String languageId);

	/**
	 * Returns the localized descricao of this evento in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized descricao of this evento
	 */
	@AutoEscape
	public String getDescricao(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescricaoCurrentLanguageId();

	@AutoEscape
	public String getDescricaoCurrentValue();

	/**
	 * Returns a map of the locales and localized descricaos of this evento.
	 *
	 * @return the locales and localized descricaos of this evento
	 */
	public Map<Locale, String> getDescricaoMap();

	/**
	 * Sets the descricao of this evento.
	 *
	 * @param descricao the descricao of this evento
	 */
	public void setDescricao(String descricao);

	/**
	 * Sets the localized descricao of this evento in the language.
	 *
	 * @param descricao the localized descricao of this evento
	 * @param locale the locale of the language
	 */
	public void setDescricao(String descricao, Locale locale);

	/**
	 * Sets the localized descricao of this evento in the language, and sets the default locale.
	 *
	 * @param descricao the localized descricao of this evento
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescricao(String descricao, Locale locale,
		Locale defaultLocale);

	public void setDescricaoCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descricaos of this evento from the map of locales and localized descricaos.
	 *
	 * @param descricaoMap the locales and localized descricaos of this evento
	 */
	public void setDescricaoMap(Map<Locale, String> descricaoMap);

	/**
	 * Sets the localized descricaos of this evento from the map of locales and localized descricaos, and sets the default locale.
	 *
	 * @param descricaoMap the locales and localized descricaos of this evento
	 * @param defaultLocale the default locale
	 */
	public void setDescricaoMap(Map<Locale, String> descricaoMap,
		Locale defaultLocale);

	/**
	 * Returns the user responsavel ID of this evento.
	 *
	 * @return the user responsavel ID of this evento
	 */
	public long getUserResponsavelId();

	/**
	 * Sets the user responsavel ID of this evento.
	 *
	 * @param userResponsavelId the user responsavel ID of this evento
	 */
	public void setUserResponsavelId(long userResponsavelId);

	/**
	 * Returns the user responsavel nome of this evento.
	 *
	 * @return the user responsavel nome of this evento
	 */
	@AutoEscape
	public String getUserResponsavelNome();

	/**
	 * Sets the user responsavel nome of this evento.
	 *
	 * @param userResponsavelNome the user responsavel nome of this evento
	 */
	public void setUserResponsavelNome(String userResponsavelNome);

	/**
	 * Returns the versao of this evento.
	 *
	 * @return the versao of this evento
	 */
	public double getVersao();

	/**
	 * Sets the versao of this evento.
	 *
	 * @param versao the versao of this evento
	 */
	public void setVersao(double versao);

	/**
	 * Returns the imagem ID of this evento.
	 *
	 * @return the imagem ID of this evento
	 */
	public long getImagemId();

	/**
	 * Sets the imagem ID of this evento.
	 *
	 * @param imagemId the imagem ID of this evento
	 */
	public void setImagemId(long imagemId);

	/**
	 * Returns the article ID of this evento.
	 *
	 * @return the article ID of this evento
	 */
	public long getArticleId();

	/**
	 * Sets the article ID of this evento.
	 *
	 * @param articleId the article ID of this evento
	 */
	public void setArticleId(long articleId);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		br.com.prodevelopment.lapidarios.evento.model.Evento evento);

	@Override
	public int hashCode();

	@Override
	public CacheModel<br.com.prodevelopment.lapidarios.evento.model.Evento> toCacheModel();

	@Override
	public br.com.prodevelopment.lapidarios.evento.model.Evento toEscapedModel();

	@Override
	public br.com.prodevelopment.lapidarios.evento.model.Evento toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}