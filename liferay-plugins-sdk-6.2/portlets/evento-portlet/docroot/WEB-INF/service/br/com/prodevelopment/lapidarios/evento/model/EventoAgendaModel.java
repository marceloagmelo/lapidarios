/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.lapidarios.evento.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.model.AttachedModel;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.trash.model.TrashEntry;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the EventoAgenda service. Represents a row in the &quot;evento_agenda&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoAgendaModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoAgendaImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see EventoAgenda
 * @see br.com.prodevelopment.lapidarios.evento.model.impl.EventoAgendaImpl
 * @see br.com.prodevelopment.lapidarios.evento.model.impl.EventoAgendaModelImpl
 * @generated
 */
public interface EventoAgendaModel extends AttachedModel, BaseModel<EventoAgenda>,
	StagedModel, TrashedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a evento agenda model instance should use the {@link EventoAgenda} interface instead.
	 */

	/**
	 * Returns the primary key of this evento agenda.
	 *
	 * @return the primary key of this evento agenda
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this evento agenda.
	 *
	 * @param primaryKey the primary key of this evento agenda
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this evento agenda.
	 *
	 * @return the uuid of this evento agenda
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this evento agenda.
	 *
	 * @param uuid the uuid of this evento agenda
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the evento agenda ID of this evento agenda.
	 *
	 * @return the evento agenda ID of this evento agenda
	 */
	public long getEventoAgendaId();

	/**
	 * Sets the evento agenda ID of this evento agenda.
	 *
	 * @param eventoAgendaId the evento agenda ID of this evento agenda
	 */
	public void setEventoAgendaId(long eventoAgendaId);

	/**
	 * Returns the company ID of this evento agenda.
	 *
	 * @return the company ID of this evento agenda
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this evento agenda.
	 *
	 * @param companyId the company ID of this evento agenda
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this evento agenda.
	 *
	 * @return the group ID of this evento agenda
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this evento agenda.
	 *
	 * @param groupId the group ID of this evento agenda
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the create user ID of this evento agenda.
	 *
	 * @return the create user ID of this evento agenda
	 */
	public long getCreateUserId();

	/**
	 * Sets the create user ID of this evento agenda.
	 *
	 * @param createUserId the create user ID of this evento agenda
	 */
	public void setCreateUserId(long createUserId);

	/**
	 * Returns the create user uuid of this evento agenda.
	 *
	 * @return the create user uuid of this evento agenda
	 * @throws SystemException if a system exception occurred
	 */
	public String getCreateUserUuid() throws SystemException;

	/**
	 * Sets the create user uuid of this evento agenda.
	 *
	 * @param createUserUuid the create user uuid of this evento agenda
	 */
	public void setCreateUserUuid(String createUserUuid);

	/**
	 * Returns the modified user ID of this evento agenda.
	 *
	 * @return the modified user ID of this evento agenda
	 */
	public long getModifiedUserId();

	/**
	 * Sets the modified user ID of this evento agenda.
	 *
	 * @param modifiedUserId the modified user ID of this evento agenda
	 */
	public void setModifiedUserId(long modifiedUserId);

	/**
	 * Returns the modified user uuid of this evento agenda.
	 *
	 * @return the modified user uuid of this evento agenda
	 * @throws SystemException if a system exception occurred
	 */
	public String getModifiedUserUuid() throws SystemException;

	/**
	 * Sets the modified user uuid of this evento agenda.
	 *
	 * @param modifiedUserUuid the modified user uuid of this evento agenda
	 */
	public void setModifiedUserUuid(String modifiedUserUuid);

	/**
	 * Returns the create date of this evento agenda.
	 *
	 * @return the create date of this evento agenda
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this evento agenda.
	 *
	 * @param createDate the create date of this evento agenda
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this evento agenda.
	 *
	 * @return the modified date of this evento agenda
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this evento agenda.
	 *
	 * @param modifiedDate the modified date of this evento agenda
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the data evento of this evento agenda.
	 *
	 * @return the data evento of this evento agenda
	 */
	public Date getDataEvento();

	/**
	 * Sets the data evento of this evento agenda.
	 *
	 * @param dataEvento the data evento of this evento agenda
	 */
	public void setDataEvento(Date dataEvento);

	/**
	 * Returns the hora evento of this evento agenda.
	 *
	 * @return the hora evento of this evento agenda
	 */
	@AutoEscape
	public String getHoraEvento();

	/**
	 * Sets the hora evento of this evento agenda.
	 *
	 * @param horaEvento the hora evento of this evento agenda
	 */
	public void setHoraEvento(String horaEvento);

	/**
	 * Returns the qtde vagas of this evento agenda.
	 *
	 * @return the qtde vagas of this evento agenda
	 */
	public int getQtdeVagas();

	/**
	 * Sets the qtde vagas of this evento agenda.
	 *
	 * @param qtdeVagas the qtde vagas of this evento agenda
	 */
	public void setQtdeVagas(int qtdeVagas);

	/**
	 * Returns the qtde vagas preenchida of this evento agenda.
	 *
	 * @return the qtde vagas preenchida of this evento agenda
	 */
	public int getQtdeVagasPreenchida();

	/**
	 * Sets the qtde vagas preenchida of this evento agenda.
	 *
	 * @param qtdeVagasPreenchida the qtde vagas preenchida of this evento agenda
	 */
	public void setQtdeVagasPreenchida(int qtdeVagasPreenchida);

	/**
	 * Returns the gratuito of this evento agenda.
	 *
	 * @return the gratuito of this evento agenda
	 */
	public boolean getGratuito();

	/**
	 * Returns <code>true</code> if this evento agenda is gratuito.
	 *
	 * @return <code>true</code> if this evento agenda is gratuito; <code>false</code> otherwise
	 */
	public boolean isGratuito();

	/**
	 * Sets whether this evento agenda is gratuito.
	 *
	 * @param gratuito the gratuito of this evento agenda
	 */
	public void setGratuito(boolean gratuito);

	/**
	 * Returns the valor of this evento agenda.
	 *
	 * @return the valor of this evento agenda
	 */
	public double getValor();

	/**
	 * Sets the valor of this evento agenda.
	 *
	 * @param valor the valor of this evento agenda
	 */
	public void setValor(double valor);

	/**
	 * Returns the user responsavel ID of this evento agenda.
	 *
	 * @return the user responsavel ID of this evento agenda
	 */
	public long getUserResponsavelId();

	/**
	 * Sets the user responsavel ID of this evento agenda.
	 *
	 * @param userResponsavelId the user responsavel ID of this evento agenda
	 */
	public void setUserResponsavelId(long userResponsavelId);

	/**
	 * Returns the user responsavel nome of this evento agenda.
	 *
	 * @return the user responsavel nome of this evento agenda
	 */
	@AutoEscape
	public String getUserResponsavelNome();

	/**
	 * Sets the user responsavel nome of this evento agenda.
	 *
	 * @param userResponsavelNome the user responsavel nome of this evento agenda
	 */
	public void setUserResponsavelNome(String userResponsavelNome);

	/**
	 * Returns the evento ID of this evento agenda.
	 *
	 * @return the evento ID of this evento agenda
	 */
	public long getEventoId();

	/**
	 * Sets the evento ID of this evento agenda.
	 *
	 * @param eventoId the evento ID of this evento agenda
	 */
	public void setEventoId(long eventoId);

	/**
	 * Returns the evento nome of this evento agenda.
	 *
	 * @return the evento nome of this evento agenda
	 */
	public String getEventoNome();

	/**
	 * Returns the localized evento nome of this evento agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized evento nome of this evento agenda
	 */
	@AutoEscape
	public String getEventoNome(Locale locale);

	/**
	 * Returns the localized evento nome of this evento agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized evento nome of this evento agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getEventoNome(Locale locale, boolean useDefault);

	/**
	 * Returns the localized evento nome of this evento agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized evento nome of this evento agenda
	 */
	@AutoEscape
	public String getEventoNome(String languageId);

	/**
	 * Returns the localized evento nome of this evento agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized evento nome of this evento agenda
	 */
	@AutoEscape
	public String getEventoNome(String languageId, boolean useDefault);

	@AutoEscape
	public String getEventoNomeCurrentLanguageId();

	@AutoEscape
	public String getEventoNomeCurrentValue();

	/**
	 * Returns a map of the locales and localized evento nomes of this evento agenda.
	 *
	 * @return the locales and localized evento nomes of this evento agenda
	 */
	public Map<Locale, String> getEventoNomeMap();

	/**
	 * Sets the evento nome of this evento agenda.
	 *
	 * @param eventoNome the evento nome of this evento agenda
	 */
	public void setEventoNome(String eventoNome);

	/**
	 * Sets the localized evento nome of this evento agenda in the language.
	 *
	 * @param eventoNome the localized evento nome of this evento agenda
	 * @param locale the locale of the language
	 */
	public void setEventoNome(String eventoNome, Locale locale);

	/**
	 * Sets the localized evento nome of this evento agenda in the language, and sets the default locale.
	 *
	 * @param eventoNome the localized evento nome of this evento agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setEventoNome(String eventoNome, Locale locale,
		Locale defaultLocale);

	public void setEventoNomeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized evento nomes of this evento agenda from the map of locales and localized evento nomes.
	 *
	 * @param eventoNomeMap the locales and localized evento nomes of this evento agenda
	 */
	public void setEventoNomeMap(Map<Locale, String> eventoNomeMap);

	/**
	 * Sets the localized evento nomes of this evento agenda from the map of locales and localized evento nomes, and sets the default locale.
	 *
	 * @param eventoNomeMap the locales and localized evento nomes of this evento agenda
	 * @param defaultLocale the default locale
	 */
	public void setEventoNomeMap(Map<Locale, String> eventoNomeMap,
		Locale defaultLocale);

	/**
	 * Returns the local ID of this evento agenda.
	 *
	 * @return the local ID of this evento agenda
	 */
	public long getLocalId();

	/**
	 * Sets the local ID of this evento agenda.
	 *
	 * @param localId the local ID of this evento agenda
	 */
	public void setLocalId(long localId);

	/**
	 * Returns the local nome of this evento agenda.
	 *
	 * @return the local nome of this evento agenda
	 */
	@AutoEscape
	public String getLocalNome();

	/**
	 * Sets the local nome of this evento agenda.
	 *
	 * @param localNome the local nome of this evento agenda
	 */
	public void setLocalNome(String localNome);

	/**
	 * Returns the observacao of this evento agenda.
	 *
	 * @return the observacao of this evento agenda
	 */
	public String getObservacao();

	/**
	 * Returns the localized observacao of this evento agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized observacao of this evento agenda
	 */
	@AutoEscape
	public String getObservacao(Locale locale);

	/**
	 * Returns the localized observacao of this evento agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized observacao of this evento agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getObservacao(Locale locale, boolean useDefault);

	/**
	 * Returns the localized observacao of this evento agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized observacao of this evento agenda
	 */
	@AutoEscape
	public String getObservacao(String languageId);

	/**
	 * Returns the localized observacao of this evento agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized observacao of this evento agenda
	 */
	@AutoEscape
	public String getObservacao(String languageId, boolean useDefault);

	@AutoEscape
	public String getObservacaoCurrentLanguageId();

	@AutoEscape
	public String getObservacaoCurrentValue();

	/**
	 * Returns a map of the locales and localized observacaos of this evento agenda.
	 *
	 * @return the locales and localized observacaos of this evento agenda
	 */
	public Map<Locale, String> getObservacaoMap();

	/**
	 * Sets the observacao of this evento agenda.
	 *
	 * @param observacao the observacao of this evento agenda
	 */
	public void setObservacao(String observacao);

	/**
	 * Sets the localized observacao of this evento agenda in the language.
	 *
	 * @param observacao the localized observacao of this evento agenda
	 * @param locale the locale of the language
	 */
	public void setObservacao(String observacao, Locale locale);

	/**
	 * Sets the localized observacao of this evento agenda in the language, and sets the default locale.
	 *
	 * @param observacao the localized observacao of this evento agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setObservacao(String observacao, Locale locale,
		Locale defaultLocale);

	public void setObservacaoCurrentLanguageId(String languageId);

	/**
	 * Sets the localized observacaos of this evento agenda from the map of locales and localized observacaos.
	 *
	 * @param observacaoMap the locales and localized observacaos of this evento agenda
	 */
	public void setObservacaoMap(Map<Locale, String> observacaoMap);

	/**
	 * Sets the localized observacaos of this evento agenda from the map of locales and localized observacaos, and sets the default locale.
	 *
	 * @param observacaoMap the locales and localized observacaos of this evento agenda
	 * @param defaultLocale the default locale
	 */
	public void setObservacaoMap(Map<Locale, String> observacaoMap,
		Locale defaultLocale);

	/**
	 * Returns the versao of this evento agenda.
	 *
	 * @return the versao of this evento agenda
	 */
	public double getVersao();

	/**
	 * Sets the versao of this evento agenda.
	 *
	 * @param versao the versao of this evento agenda
	 */
	public void setVersao(double versao);

	/**
	 * Returns the status of this evento agenda.
	 *
	 * @return the status of this evento agenda
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this evento agenda.
	 *
	 * @param status the status of this evento agenda
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this evento agenda.
	 *
	 * @return the status by user ID of this evento agenda
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this evento agenda.
	 *
	 * @param statusByUserId the status by user ID of this evento agenda
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this evento agenda.
	 *
	 * @return the status by user uuid of this evento agenda
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this evento agenda.
	 *
	 * @param statusByUserUuid the status by user uuid of this evento agenda
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this evento agenda.
	 *
	 * @return the status by user name of this evento agenda
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this evento agenda.
	 *
	 * @param statusByUserName the status by user name of this evento agenda
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this evento agenda.
	 *
	 * @return the status date of this evento agenda
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this evento agenda.
	 *
	 * @param statusDate the status date of this evento agenda
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the fully qualified class name of this evento agenda.
	 *
	 * @return the fully qualified class name of this evento agenda
	 */
	@Override
	public String getClassName();

	public void setClassName(String className);

	/**
	 * Returns the class name ID of this evento agenda.
	 *
	 * @return the class name ID of this evento agenda
	 */
	@Override
	public long getClassNameId();

	/**
	 * Sets the class name ID of this evento agenda.
	 *
	 * @param classNameId the class name ID of this evento agenda
	 */
	@Override
	public void setClassNameId(long classNameId);

	/**
	 * Returns the class p k of this evento agenda.
	 *
	 * @return the class p k of this evento agenda
	 */
	@Override
	public long getClassPK();

	/**
	 * Sets the class p k of this evento agenda.
	 *
	 * @param classPK the class p k of this evento agenda
	 */
	@Override
	public void setClassPK(long classPK);

	/**
	 * Returns the trash entry created when this evento agenda was moved to the Recycle Bin. The trash entry may belong to one of the ancestors of this evento agenda.
	 *
	 * @return the trash entry created when this evento agenda was moved to the Recycle Bin
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public TrashEntry getTrashEntry() throws PortalException, SystemException;

	/**
	 * Returns the class primary key of the trash entry for this evento agenda.
	 *
	 * @return the class primary key of the trash entry for this evento agenda
	 */
	@Override
	public long getTrashEntryClassPK();

	/**
	 * Returns the trash handler for this evento agenda.
	 *
	 * @return the trash handler for this evento agenda
	 */
	@Override
	public TrashHandler getTrashHandler();

	/**
	 * Returns <code>true</code> if this evento agenda is in the Recycle Bin.
	 *
	 * @return <code>true</code> if this evento agenda is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrash();

	/**
	 * Returns <code>true</code> if the parent of this evento agenda is in the Recycle Bin.
	 *
	 * @return <code>true</code> if the parent of this evento agenda is in the Recycle Bin; <code>false</code> otherwise
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean isInTrashContainer();

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this evento agenda is approved.
	 *
	 * @return <code>true</code> if this evento agenda is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this evento agenda is denied.
	 *
	 * @return <code>true</code> if this evento agenda is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this evento agenda is a draft.
	 *
	 * @return <code>true</code> if this evento agenda is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this evento agenda is expired.
	 *
	 * @return <code>true</code> if this evento agenda is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this evento agenda is inactive.
	 *
	 * @return <code>true</code> if this evento agenda is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this evento agenda is incomplete.
	 *
	 * @return <code>true</code> if this evento agenda is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this evento agenda is pending.
	 *
	 * @return <code>true</code> if this evento agenda is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this evento agenda is scheduled.
	 *
	 * @return <code>true</code> if this evento agenda is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		br.com.prodevelopment.lapidarios.evento.model.EventoAgenda eventoAgenda);

	@Override
	public int hashCode();

	@Override
	public CacheModel<br.com.prodevelopment.lapidarios.evento.model.EventoAgenda> toCacheModel();

	@Override
	public br.com.prodevelopment.lapidarios.evento.model.EventoAgenda toEscapedModel();

	@Override
	public br.com.prodevelopment.lapidarios.evento.model.EventoAgenda toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}