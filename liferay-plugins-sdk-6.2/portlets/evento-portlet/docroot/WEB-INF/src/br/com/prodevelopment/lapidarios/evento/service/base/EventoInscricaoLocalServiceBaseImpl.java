/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.lapidarios.evento.service.base;

import br.com.prodevelopment.lapidarios.evento.model.EventoInscricao;
import br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalService;
import br.com.prodevelopment.lapidarios.evento.service.persistence.EventoAgendaPersistence;
import br.com.prodevelopment.lapidarios.evento.service.persistence.EventoInscricaoPersistence;
import br.com.prodevelopment.lapidarios.evento.service.persistence.EventoNaoInscritoPersistence;
import br.com.prodevelopment.lapidarios.evento.service.persistence.EventoPersistence;
import br.com.prodevelopment.lapidarios.evento.service.persistence.LocalPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the evento inscricao local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.lapidarios.evento.service.impl.EventoInscricaoLocalServiceImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see br.com.prodevelopment.lapidarios.evento.service.impl.EventoInscricaoLocalServiceImpl
 * @see br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalServiceUtil
 * @generated
 */
public abstract class EventoInscricaoLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EventoInscricaoLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalServiceUtil} to access the evento inscricao local service.
	 */

	/**
	 * Adds the evento inscricao to the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventoInscricao the evento inscricao
	 * @return the evento inscricao that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EventoInscricao addEventoInscricao(EventoInscricao eventoInscricao)
		throws SystemException {
		eventoInscricao.setNew(true);

		return eventoInscricaoPersistence.update(eventoInscricao);
	}

	/**
	 * Creates a new evento inscricao with the primary key. Does not add the evento inscricao to the database.
	 *
	 * @param eventoInscricaoId the primary key for the new evento inscricao
	 * @return the new evento inscricao
	 */
	@Override
	public EventoInscricao createEventoInscricao(long eventoInscricaoId) {
		return eventoInscricaoPersistence.create(eventoInscricaoId);
	}

	/**
	 * Deletes the evento inscricao with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventoInscricaoId the primary key of the evento inscricao
	 * @return the evento inscricao that was removed
	 * @throws PortalException if a evento inscricao with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EventoInscricao deleteEventoInscricao(long eventoInscricaoId)
		throws PortalException, SystemException {
		return eventoInscricaoPersistence.remove(eventoInscricaoId);
	}

	/**
	 * Deletes the evento inscricao from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventoInscricao the evento inscricao
	 * @return the evento inscricao that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EventoInscricao deleteEventoInscricao(
		EventoInscricao eventoInscricao) throws SystemException {
		return eventoInscricaoPersistence.remove(eventoInscricao);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EventoInscricao.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return eventoInscricaoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoInscricaoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return eventoInscricaoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoInscricaoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return eventoInscricaoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return eventoInscricaoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return eventoInscricaoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EventoInscricao fetchEventoInscricao(long eventoInscricaoId)
		throws SystemException {
		return eventoInscricaoPersistence.fetchByPrimaryKey(eventoInscricaoId);
	}

	/**
	 * Returns the evento inscricao with the matching UUID and company.
	 *
	 * @param uuid the evento inscricao's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching evento inscricao, or <code>null</code> if a matching evento inscricao could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EventoInscricao fetchEventoInscricaoByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return eventoInscricaoPersistence.fetchByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the evento inscricao matching the UUID and group.
	 *
	 * @param uuid the evento inscricao's UUID
	 * @param groupId the primary key of the group
	 * @return the matching evento inscricao, or <code>null</code> if a matching evento inscricao could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EventoInscricao fetchEventoInscricaoByUuidAndGroupId(String uuid,
		long groupId) throws SystemException {
		return eventoInscricaoPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the evento inscricao with the primary key.
	 *
	 * @param eventoInscricaoId the primary key of the evento inscricao
	 * @return the evento inscricao
	 * @throws PortalException if a evento inscricao with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EventoInscricao getEventoInscricao(long eventoInscricaoId)
		throws PortalException, SystemException {
		return eventoInscricaoPersistence.findByPrimaryKey(eventoInscricaoId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return eventoInscricaoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the evento inscricao with the matching UUID and company.
	 *
	 * @param uuid the evento inscricao's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching evento inscricao
	 * @throws PortalException if a matching evento inscricao could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EventoInscricao getEventoInscricaoByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return eventoInscricaoPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the evento inscricao matching the UUID and group.
	 *
	 * @param uuid the evento inscricao's UUID
	 * @param groupId the primary key of the group
	 * @return the matching evento inscricao
	 * @throws PortalException if a matching evento inscricao could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EventoInscricao getEventoInscricaoByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return eventoInscricaoPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the evento inscricaos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.lapidarios.evento.model.impl.EventoInscricaoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of evento inscricaos
	 * @param end the upper bound of the range of evento inscricaos (not inclusive)
	 * @return the range of evento inscricaos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<EventoInscricao> getEventoInscricaos(int start, int end)
		throws SystemException {
		return eventoInscricaoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of evento inscricaos.
	 *
	 * @return the number of evento inscricaos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEventoInscricaosCount() throws SystemException {
		return eventoInscricaoPersistence.countAll();
	}

	/**
	 * Updates the evento inscricao in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param eventoInscricao the evento inscricao
	 * @return the evento inscricao that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EventoInscricao updateEventoInscricao(
		EventoInscricao eventoInscricao) throws SystemException {
		return eventoInscricaoPersistence.update(eventoInscricao);
	}

	/**
	 * Returns the evento local service.
	 *
	 * @return the evento local service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoLocalService getEventoLocalService() {
		return eventoLocalService;
	}

	/**
	 * Sets the evento local service.
	 *
	 * @param eventoLocalService the evento local service
	 */
	public void setEventoLocalService(
		br.com.prodevelopment.lapidarios.evento.service.EventoLocalService eventoLocalService) {
		this.eventoLocalService = eventoLocalService;
	}

	/**
	 * Returns the evento remote service.
	 *
	 * @return the evento remote service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoService getEventoService() {
		return eventoService;
	}

	/**
	 * Sets the evento remote service.
	 *
	 * @param eventoService the evento remote service
	 */
	public void setEventoService(
		br.com.prodevelopment.lapidarios.evento.service.EventoService eventoService) {
		this.eventoService = eventoService;
	}

	/**
	 * Returns the evento persistence.
	 *
	 * @return the evento persistence
	 */
	public EventoPersistence getEventoPersistence() {
		return eventoPersistence;
	}

	/**
	 * Sets the evento persistence.
	 *
	 * @param eventoPersistence the evento persistence
	 */
	public void setEventoPersistence(EventoPersistence eventoPersistence) {
		this.eventoPersistence = eventoPersistence;
	}

	/**
	 * Returns the evento agenda local service.
	 *
	 * @return the evento agenda local service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoAgendaLocalService getEventoAgendaLocalService() {
		return eventoAgendaLocalService;
	}

	/**
	 * Sets the evento agenda local service.
	 *
	 * @param eventoAgendaLocalService the evento agenda local service
	 */
	public void setEventoAgendaLocalService(
		br.com.prodevelopment.lapidarios.evento.service.EventoAgendaLocalService eventoAgendaLocalService) {
		this.eventoAgendaLocalService = eventoAgendaLocalService;
	}

	/**
	 * Returns the evento agenda remote service.
	 *
	 * @return the evento agenda remote service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoAgendaService getEventoAgendaService() {
		return eventoAgendaService;
	}

	/**
	 * Sets the evento agenda remote service.
	 *
	 * @param eventoAgendaService the evento agenda remote service
	 */
	public void setEventoAgendaService(
		br.com.prodevelopment.lapidarios.evento.service.EventoAgendaService eventoAgendaService) {
		this.eventoAgendaService = eventoAgendaService;
	}

	/**
	 * Returns the evento agenda persistence.
	 *
	 * @return the evento agenda persistence
	 */
	public EventoAgendaPersistence getEventoAgendaPersistence() {
		return eventoAgendaPersistence;
	}

	/**
	 * Sets the evento agenda persistence.
	 *
	 * @param eventoAgendaPersistence the evento agenda persistence
	 */
	public void setEventoAgendaPersistence(
		EventoAgendaPersistence eventoAgendaPersistence) {
		this.eventoAgendaPersistence = eventoAgendaPersistence;
	}

	/**
	 * Returns the evento inscricao local service.
	 *
	 * @return the evento inscricao local service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalService getEventoInscricaoLocalService() {
		return eventoInscricaoLocalService;
	}

	/**
	 * Sets the evento inscricao local service.
	 *
	 * @param eventoInscricaoLocalService the evento inscricao local service
	 */
	public void setEventoInscricaoLocalService(
		br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalService eventoInscricaoLocalService) {
		this.eventoInscricaoLocalService = eventoInscricaoLocalService;
	}

	/**
	 * Returns the evento inscricao remote service.
	 *
	 * @return the evento inscricao remote service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoService getEventoInscricaoService() {
		return eventoInscricaoService;
	}

	/**
	 * Sets the evento inscricao remote service.
	 *
	 * @param eventoInscricaoService the evento inscricao remote service
	 */
	public void setEventoInscricaoService(
		br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoService eventoInscricaoService) {
		this.eventoInscricaoService = eventoInscricaoService;
	}

	/**
	 * Returns the evento inscricao persistence.
	 *
	 * @return the evento inscricao persistence
	 */
	public EventoInscricaoPersistence getEventoInscricaoPersistence() {
		return eventoInscricaoPersistence;
	}

	/**
	 * Sets the evento inscricao persistence.
	 *
	 * @param eventoInscricaoPersistence the evento inscricao persistence
	 */
	public void setEventoInscricaoPersistence(
		EventoInscricaoPersistence eventoInscricaoPersistence) {
		this.eventoInscricaoPersistence = eventoInscricaoPersistence;
	}

	/**
	 * Returns the evento nao inscrito local service.
	 *
	 * @return the evento nao inscrito local service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoLocalService getEventoNaoInscritoLocalService() {
		return eventoNaoInscritoLocalService;
	}

	/**
	 * Sets the evento nao inscrito local service.
	 *
	 * @param eventoNaoInscritoLocalService the evento nao inscrito local service
	 */
	public void setEventoNaoInscritoLocalService(
		br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoLocalService eventoNaoInscritoLocalService) {
		this.eventoNaoInscritoLocalService = eventoNaoInscritoLocalService;
	}

	/**
	 * Returns the evento nao inscrito remote service.
	 *
	 * @return the evento nao inscrito remote service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoService getEventoNaoInscritoService() {
		return eventoNaoInscritoService;
	}

	/**
	 * Sets the evento nao inscrito remote service.
	 *
	 * @param eventoNaoInscritoService the evento nao inscrito remote service
	 */
	public void setEventoNaoInscritoService(
		br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoService eventoNaoInscritoService) {
		this.eventoNaoInscritoService = eventoNaoInscritoService;
	}

	/**
	 * Returns the evento nao inscrito persistence.
	 *
	 * @return the evento nao inscrito persistence
	 */
	public EventoNaoInscritoPersistence getEventoNaoInscritoPersistence() {
		return eventoNaoInscritoPersistence;
	}

	/**
	 * Sets the evento nao inscrito persistence.
	 *
	 * @param eventoNaoInscritoPersistence the evento nao inscrito persistence
	 */
	public void setEventoNaoInscritoPersistence(
		EventoNaoInscritoPersistence eventoNaoInscritoPersistence) {
		this.eventoNaoInscritoPersistence = eventoNaoInscritoPersistence;
	}

	/**
	 * Returns the local local service.
	 *
	 * @return the local local service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.LocalLocalService getLocalLocalService() {
		return localLocalService;
	}

	/**
	 * Sets the local local service.
	 *
	 * @param localLocalService the local local service
	 */
	public void setLocalLocalService(
		br.com.prodevelopment.lapidarios.evento.service.LocalLocalService localLocalService) {
		this.localLocalService = localLocalService;
	}

	/**
	 * Returns the local remote service.
	 *
	 * @return the local remote service
	 */
	public br.com.prodevelopment.lapidarios.evento.service.LocalService getLocalService() {
		return localService;
	}

	/**
	 * Sets the local remote service.
	 *
	 * @param localService the local remote service
	 */
	public void setLocalService(
		br.com.prodevelopment.lapidarios.evento.service.LocalService localService) {
		this.localService = localService;
	}

	/**
	 * Returns the local persistence.
	 *
	 * @return the local persistence
	 */
	public LocalPersistence getLocalPersistence() {
		return localPersistence;
	}

	/**
	 * Sets the local persistence.
	 *
	 * @param localPersistence the local persistence
	 */
	public void setLocalPersistence(LocalPersistence localPersistence) {
		this.localPersistence = localPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.lapidarios.evento.model.EventoInscricao",
			eventoInscricaoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.lapidarios.evento.model.EventoInscricao");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EventoInscricao.class;
	}

	protected String getModelClassName() {
		return EventoInscricao.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eventoInscricaoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoLocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoLocalService eventoLocalService;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoService eventoService;
	@BeanReference(type = EventoPersistence.class)
	protected EventoPersistence eventoPersistence;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoAgendaLocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoAgendaLocalService eventoAgendaLocalService;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoAgendaService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoAgendaService eventoAgendaService;
	@BeanReference(type = EventoAgendaPersistence.class)
	protected EventoAgendaPersistence eventoAgendaPersistence;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoLocalService eventoInscricaoLocalService;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoInscricaoService eventoInscricaoService;
	@BeanReference(type = EventoInscricaoPersistence.class)
	protected EventoInscricaoPersistence eventoInscricaoPersistence;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoLocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoLocalService eventoNaoInscritoLocalService;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.EventoNaoInscritoService eventoNaoInscritoService;
	@BeanReference(type = EventoNaoInscritoPersistence.class)
	protected EventoNaoInscritoPersistence eventoNaoInscritoPersistence;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.LocalLocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.LocalLocalService localLocalService;
	@BeanReference(type = br.com.prodevelopment.lapidarios.evento.service.LocalService.class)
	protected br.com.prodevelopment.lapidarios.evento.service.LocalService localService;
	@BeanReference(type = LocalPersistence.class)
	protected LocalPersistence localPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EventoInscricaoLocalServiceClpInvoker _clpInvoker = new EventoInscricaoLocalServiceClpInvoker();
}