/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.lapidarios.evento.model.impl;

import br.com.prodevelopment.lapidarios.evento.model.EventoAgenda;
import br.com.prodevelopment.lapidarios.evento.model.EventoAgendaModel;
import br.com.prodevelopment.lapidarios.evento.model.EventoAgendaSoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the EventoAgenda service. Represents a row in the &quot;evento_agenda&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.prodevelopment.lapidarios.evento.model.EventoAgendaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventoAgendaImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see EventoAgendaImpl
 * @see br.com.prodevelopment.lapidarios.evento.model.EventoAgenda
 * @see br.com.prodevelopment.lapidarios.evento.model.EventoAgendaModel
 * @generated
 */
@JSON(strict = true)
public class EventoAgendaModelImpl extends BaseModelImpl<EventoAgenda>
	implements EventoAgendaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a evento agenda model instance should use the {@link br.com.prodevelopment.lapidarios.evento.model.EventoAgenda} interface instead.
	 */
	public static final String TABLE_NAME = "evento_agenda";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "eventoAgendaId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createUserId", Types.BIGINT },
			{ "modifiedUserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dataEvento", Types.TIMESTAMP },
			{ "horaEvento", Types.VARCHAR },
			{ "qtdeVagas", Types.INTEGER },
			{ "qtdeVagasPreenchida", Types.INTEGER },
			{ "gratuito", Types.BOOLEAN },
			{ "valor", Types.DOUBLE },
			{ "userResponsavelId", Types.BIGINT },
			{ "userResponsavelNome", Types.VARCHAR },
			{ "eventoId", Types.BIGINT },
			{ "eventoNome", Types.VARCHAR },
			{ "localId", Types.BIGINT },
			{ "localNome", Types.VARCHAR },
			{ "observacao", Types.VARCHAR },
			{ "versao", Types.DOUBLE },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table evento_agenda (uuid_ VARCHAR(75) null,eventoAgendaId LONG not null primary key,companyId LONG,groupId LONG,createUserId LONG,modifiedUserId LONG,createDate DATE null,modifiedDate DATE null,dataEvento DATE null,horaEvento VARCHAR(75) null,qtdeVagas INTEGER,qtdeVagasPreenchida INTEGER,gratuito BOOLEAN,valor DOUBLE,userResponsavelId LONG,userResponsavelNome VARCHAR(75) null,eventoId LONG,eventoNome STRING null,localId LONG,localNome VARCHAR(75) null,observacao STRING null,versao DOUBLE,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,classNameId LONG,classPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table evento_agenda";
	public static final String ORDER_BY_JPQL = " ORDER BY eventoAgenda.eventoNome ASC, eventoAgenda.dataEvento ASC, eventoAgenda.horaEvento ASC";
	public static final String ORDER_BY_SQL = " ORDER BY evento_agenda.eventoNome ASC, evento_agenda.dataEvento ASC, evento_agenda.horaEvento ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.com.prodevelopment.lapidarios.evento.model.EventoAgenda"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.com.prodevelopment.lapidarios.evento.model.EventoAgenda"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.br.com.prodevelopment.lapidarios.evento.model.EventoAgenda"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long DATAEVENTO_COLUMN_BITMASK = 2L;
	public static long EVENTOID_COLUMN_BITMASK = 4L;
	public static long EVENTONOME_COLUMN_BITMASK = 8L;
	public static long GROUPID_COLUMN_BITMASK = 16L;
	public static long LOCALID_COLUMN_BITMASK = 32L;
	public static long LOCALNOME_COLUMN_BITMASK = 64L;
	public static long STATUS_COLUMN_BITMASK = 128L;
	public static long USERRESPONSAVELID_COLUMN_BITMASK = 256L;
	public static long USERRESPONSAVELNOME_COLUMN_BITMASK = 512L;
	public static long UUID_COLUMN_BITMASK = 1024L;
	public static long HORAEVENTO_COLUMN_BITMASK = 2048L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventoAgenda toModel(EventoAgendaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventoAgenda model = new EventoAgendaImpl();

		model.setUuid(soapModel.getUuid());
		model.setEventoAgendaId(soapModel.getEventoAgendaId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setModifiedUserId(soapModel.getModifiedUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDataEvento(soapModel.getDataEvento());
		model.setHoraEvento(soapModel.getHoraEvento());
		model.setQtdeVagas(soapModel.getQtdeVagas());
		model.setQtdeVagasPreenchida(soapModel.getQtdeVagasPreenchida());
		model.setGratuito(soapModel.getGratuito());
		model.setValor(soapModel.getValor());
		model.setUserResponsavelId(soapModel.getUserResponsavelId());
		model.setUserResponsavelNome(soapModel.getUserResponsavelNome());
		model.setEventoId(soapModel.getEventoId());
		model.setEventoNome(soapModel.getEventoNome());
		model.setLocalId(soapModel.getLocalId());
		model.setLocalNome(soapModel.getLocalNome());
		model.setObservacao(soapModel.getObservacao());
		model.setVersao(soapModel.getVersao());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventoAgenda> toModels(EventoAgendaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventoAgenda> models = new ArrayList<EventoAgenda>(soapModels.length);

		for (EventoAgendaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.com.prodevelopment.lapidarios.evento.model.EventoAgenda"));

	public EventoAgendaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventoAgendaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventoAgendaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventoAgendaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventoAgenda.class;
	}

	@Override
	public String getModelClassName() {
		return EventoAgenda.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("eventoAgendaId", getEventoAgendaId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dataEvento", getDataEvento());
		attributes.put("horaEvento", getHoraEvento());
		attributes.put("qtdeVagas", getQtdeVagas());
		attributes.put("qtdeVagasPreenchida", getQtdeVagasPreenchida());
		attributes.put("gratuito", getGratuito());
		attributes.put("valor", getValor());
		attributes.put("userResponsavelId", getUserResponsavelId());
		attributes.put("userResponsavelNome", getUserResponsavelNome());
		attributes.put("eventoId", getEventoId());
		attributes.put("eventoNome", getEventoNome());
		attributes.put("localId", getLocalId());
		attributes.put("localNome", getLocalNome());
		attributes.put("observacao", getObservacao());
		attributes.put("versao", getVersao());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long eventoAgendaId = (Long)attributes.get("eventoAgendaId");

		if (eventoAgendaId != null) {
			setEventoAgendaId(eventoAgendaId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long createUserId = (Long)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date dataEvento = (Date)attributes.get("dataEvento");

		if (dataEvento != null) {
			setDataEvento(dataEvento);
		}

		String horaEvento = (String)attributes.get("horaEvento");

		if (horaEvento != null) {
			setHoraEvento(horaEvento);
		}

		Integer qtdeVagas = (Integer)attributes.get("qtdeVagas");

		if (qtdeVagas != null) {
			setQtdeVagas(qtdeVagas);
		}

		Integer qtdeVagasPreenchida = (Integer)attributes.get(
				"qtdeVagasPreenchida");

		if (qtdeVagasPreenchida != null) {
			setQtdeVagasPreenchida(qtdeVagasPreenchida);
		}

		Boolean gratuito = (Boolean)attributes.get("gratuito");

		if (gratuito != null) {
			setGratuito(gratuito);
		}

		Double valor = (Double)attributes.get("valor");

		if (valor != null) {
			setValor(valor);
		}

		Long userResponsavelId = (Long)attributes.get("userResponsavelId");

		if (userResponsavelId != null) {
			setUserResponsavelId(userResponsavelId);
		}

		String userResponsavelNome = (String)attributes.get(
				"userResponsavelNome");

		if (userResponsavelNome != null) {
			setUserResponsavelNome(userResponsavelNome);
		}

		Long eventoId = (Long)attributes.get("eventoId");

		if (eventoId != null) {
			setEventoId(eventoId);
		}

		String eventoNome = (String)attributes.get("eventoNome");

		if (eventoNome != null) {
			setEventoNome(eventoNome);
		}

		Long localId = (Long)attributes.get("localId");

		if (localId != null) {
			setLocalId(localId);
		}

		String localNome = (String)attributes.get("localNome");

		if (localNome != null) {
			setLocalNome(localNome);
		}

		String observacao = (String)attributes.get("observacao");

		if (observacao != null) {
			setObservacao(observacao);
		}

		Double versao = (Double)attributes.get("versao");

		if (versao != null) {
			setVersao(versao);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEventoAgendaId() {
		return _eventoAgendaId;
	}

	@Override
	public void setEventoAgendaId(long eventoAgendaId) {
		_eventoAgendaId = eventoAgendaId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCreateUserId() {
		return _createUserId;
	}

	@Override
	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getCreateUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreateUserId(), "uuid",
			_createUserUuid);
	}

	@Override
	public void setCreateUserUuid(String createUserUuid) {
		_createUserUuid = createUserUuid;
	}

	@JSON
	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDataEvento() {
		return _dataEvento;
	}

	@Override
	public void setDataEvento(Date dataEvento) {
		_columnBitmask = -1L;

		if (_originalDataEvento == null) {
			_originalDataEvento = _dataEvento;
		}

		_dataEvento = dataEvento;
	}

	public Date getOriginalDataEvento() {
		return _originalDataEvento;
	}

	@JSON
	@Override
	public String getHoraEvento() {
		if (_horaEvento == null) {
			return StringPool.BLANK;
		}
		else {
			return _horaEvento;
		}
	}

	@Override
	public void setHoraEvento(String horaEvento) {
		_columnBitmask = -1L;

		_horaEvento = horaEvento;
	}

	@JSON
	@Override
	public int getQtdeVagas() {
		return _qtdeVagas;
	}

	@Override
	public void setQtdeVagas(int qtdeVagas) {
		_qtdeVagas = qtdeVagas;
	}

	@JSON
	@Override
	public int getQtdeVagasPreenchida() {
		return _qtdeVagasPreenchida;
	}

	@Override
	public void setQtdeVagasPreenchida(int qtdeVagasPreenchida) {
		_qtdeVagasPreenchida = qtdeVagasPreenchida;
	}

	@JSON
	@Override
	public boolean getGratuito() {
		return _gratuito;
	}

	@Override
	public boolean isGratuito() {
		return _gratuito;
	}

	@Override
	public void setGratuito(boolean gratuito) {
		_gratuito = gratuito;
	}

	@JSON
	@Override
	public double getValor() {
		return _valor;
	}

	@Override
	public void setValor(double valor) {
		_valor = valor;
	}

	@JSON
	@Override
	public long getUserResponsavelId() {
		return _userResponsavelId;
	}

	@Override
	public void setUserResponsavelId(long userResponsavelId) {
		_columnBitmask |= USERRESPONSAVELID_COLUMN_BITMASK;

		if (!_setOriginalUserResponsavelId) {
			_setOriginalUserResponsavelId = true;

			_originalUserResponsavelId = _userResponsavelId;
		}

		_userResponsavelId = userResponsavelId;
	}

	public long getOriginalUserResponsavelId() {
		return _originalUserResponsavelId;
	}

	@JSON
	@Override
	public String getUserResponsavelNome() {
		if (_userResponsavelNome == null) {
			return StringPool.BLANK;
		}
		else {
			return _userResponsavelNome;
		}
	}

	@Override
	public void setUserResponsavelNome(String userResponsavelNome) {
		_columnBitmask |= USERRESPONSAVELNOME_COLUMN_BITMASK;

		if (_originalUserResponsavelNome == null) {
			_originalUserResponsavelNome = _userResponsavelNome;
		}

		_userResponsavelNome = userResponsavelNome;
	}

	public String getOriginalUserResponsavelNome() {
		return GetterUtil.getString(_originalUserResponsavelNome);
	}

	@JSON
	@Override
	public long getEventoId() {
		return _eventoId;
	}

	@Override
	public void setEventoId(long eventoId) {
		_columnBitmask |= EVENTOID_COLUMN_BITMASK;

		if (!_setOriginalEventoId) {
			_setOriginalEventoId = true;

			_originalEventoId = _eventoId;
		}

		_eventoId = eventoId;
	}

	public long getOriginalEventoId() {
		return _originalEventoId;
	}

	@JSON
	@Override
	public String getEventoNome() {
		if (_eventoNome == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventoNome;
		}
	}

	@Override
	public String getEventoNome(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEventoNome(languageId);
	}

	@Override
	public String getEventoNome(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEventoNome(languageId, useDefault);
	}

	@Override
	public String getEventoNome(String languageId) {
		return LocalizationUtil.getLocalization(getEventoNome(), languageId);
	}

	@Override
	public String getEventoNome(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getEventoNome(), languageId,
			useDefault);
	}

	@Override
	public String getEventoNomeCurrentLanguageId() {
		return _eventoNomeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getEventoNomeCurrentValue() {
		Locale locale = getLocale(_eventoNomeCurrentLanguageId);

		return getEventoNome(locale);
	}

	@Override
	public Map<Locale, String> getEventoNomeMap() {
		return LocalizationUtil.getLocalizationMap(getEventoNome());
	}

	@Override
	public void setEventoNome(String eventoNome) {
		_columnBitmask = -1L;

		if (_originalEventoNome == null) {
			_originalEventoNome = _eventoNome;
		}

		_eventoNome = eventoNome;
	}

	@Override
	public void setEventoNome(String eventoNome, Locale locale) {
		setEventoNome(eventoNome, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setEventoNome(String eventoNome, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(eventoNome)) {
			setEventoNome(LocalizationUtil.updateLocalization(getEventoNome(),
					"EventoNome", eventoNome, languageId, defaultLanguageId));
		}
		else {
			setEventoNome(LocalizationUtil.removeLocalization(getEventoNome(),
					"EventoNome", languageId));
		}
	}

	@Override
	public void setEventoNomeCurrentLanguageId(String languageId) {
		_eventoNomeCurrentLanguageId = languageId;
	}

	@Override
	public void setEventoNomeMap(Map<Locale, String> eventoNomeMap) {
		setEventoNomeMap(eventoNomeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setEventoNomeMap(Map<Locale, String> eventoNomeMap,
		Locale defaultLocale) {
		if (eventoNomeMap == null) {
			return;
		}

		setEventoNome(LocalizationUtil.updateLocalization(eventoNomeMap,
				getEventoNome(), "EventoNome",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalEventoNome() {
		return GetterUtil.getString(_originalEventoNome);
	}

	@JSON
	@Override
	public long getLocalId() {
		return _localId;
	}

	@Override
	public void setLocalId(long localId) {
		_columnBitmask |= LOCALID_COLUMN_BITMASK;

		if (!_setOriginalLocalId) {
			_setOriginalLocalId = true;

			_originalLocalId = _localId;
		}

		_localId = localId;
	}

	public long getOriginalLocalId() {
		return _originalLocalId;
	}

	@JSON
	@Override
	public String getLocalNome() {
		if (_localNome == null) {
			return StringPool.BLANK;
		}
		else {
			return _localNome;
		}
	}

	@Override
	public void setLocalNome(String localNome) {
		_columnBitmask |= LOCALNOME_COLUMN_BITMASK;

		if (_originalLocalNome == null) {
			_originalLocalNome = _localNome;
		}

		_localNome = localNome;
	}

	public String getOriginalLocalNome() {
		return GetterUtil.getString(_originalLocalNome);
	}

	@JSON
	@Override
	public String getObservacao() {
		if (_observacao == null) {
			return StringPool.BLANK;
		}
		else {
			return _observacao;
		}
	}

	@Override
	public String getObservacao(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getObservacao(languageId);
	}

	@Override
	public String getObservacao(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getObservacao(languageId, useDefault);
	}

	@Override
	public String getObservacao(String languageId) {
		return LocalizationUtil.getLocalization(getObservacao(), languageId);
	}

	@Override
	public String getObservacao(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getObservacao(), languageId,
			useDefault);
	}

	@Override
	public String getObservacaoCurrentLanguageId() {
		return _observacaoCurrentLanguageId;
	}

	@JSON
	@Override
	public String getObservacaoCurrentValue() {
		Locale locale = getLocale(_observacaoCurrentLanguageId);

		return getObservacao(locale);
	}

	@Override
	public Map<Locale, String> getObservacaoMap() {
		return LocalizationUtil.getLocalizationMap(getObservacao());
	}

	@Override
	public void setObservacao(String observacao) {
		_observacao = observacao;
	}

	@Override
	public void setObservacao(String observacao, Locale locale) {
		setObservacao(observacao, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setObservacao(String observacao, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(observacao)) {
			setObservacao(LocalizationUtil.updateLocalization(getObservacao(),
					"Observacao", observacao, languageId, defaultLanguageId));
		}
		else {
			setObservacao(LocalizationUtil.removeLocalization(getObservacao(),
					"Observacao", languageId));
		}
	}

	@Override
	public void setObservacaoCurrentLanguageId(String languageId) {
		_observacaoCurrentLanguageId = languageId;
	}

	@Override
	public void setObservacaoMap(Map<Locale, String> observacaoMap) {
		setObservacaoMap(observacaoMap, LocaleUtil.getDefault());
	}

	@Override
	public void setObservacaoMap(Map<Locale, String> observacaoMap,
		Locale defaultLocale) {
		if (observacaoMap == null) {
			return;
		}

		setObservacao(LocalizationUtil.updateLocalization(observacaoMap,
				getObservacao(), "Observacao",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public double getVersao() {
		return _versao;
	}

	@Override
	public void setVersao(double versao) {
		_versao = versao;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				EventoAgenda.class.getName()), getClassNameId());
	}

	@Override
	public TrashEntry getTrashEntry() throws PortalException, SystemException {
		if (!isInTrash()) {
			return null;
		}

		TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		TrashHandler trashHandler = getTrashHandler();

		if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	@Override
	public TrashHandler getTrashHandler() {
		return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName())) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventoAgenda.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> eventoNomeMap = getEventoNomeMap();

		for (Map.Entry<Locale, String> entry : eventoNomeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> observacaoMap = getObservacaoMap();

		for (Map.Entry<Locale, String> entry : observacaoMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getEventoNome();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String eventoNome = getEventoNome(defaultLocale);

		if (Validator.isNull(eventoNome)) {
			setEventoNome(getEventoNome(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setEventoNome(getEventoNome(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String observacao = getObservacao(defaultLocale);

		if (Validator.isNull(observacao)) {
			setObservacao(getObservacao(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setObservacao(getObservacao(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public EventoAgenda toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventoAgenda)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventoAgendaImpl eventoAgendaImpl = new EventoAgendaImpl();

		eventoAgendaImpl.setUuid(getUuid());
		eventoAgendaImpl.setEventoAgendaId(getEventoAgendaId());
		eventoAgendaImpl.setCompanyId(getCompanyId());
		eventoAgendaImpl.setGroupId(getGroupId());
		eventoAgendaImpl.setCreateUserId(getCreateUserId());
		eventoAgendaImpl.setModifiedUserId(getModifiedUserId());
		eventoAgendaImpl.setCreateDate(getCreateDate());
		eventoAgendaImpl.setModifiedDate(getModifiedDate());
		eventoAgendaImpl.setDataEvento(getDataEvento());
		eventoAgendaImpl.setHoraEvento(getHoraEvento());
		eventoAgendaImpl.setQtdeVagas(getQtdeVagas());
		eventoAgendaImpl.setQtdeVagasPreenchida(getQtdeVagasPreenchida());
		eventoAgendaImpl.setGratuito(getGratuito());
		eventoAgendaImpl.setValor(getValor());
		eventoAgendaImpl.setUserResponsavelId(getUserResponsavelId());
		eventoAgendaImpl.setUserResponsavelNome(getUserResponsavelNome());
		eventoAgendaImpl.setEventoId(getEventoId());
		eventoAgendaImpl.setEventoNome(getEventoNome());
		eventoAgendaImpl.setLocalId(getLocalId());
		eventoAgendaImpl.setLocalNome(getLocalNome());
		eventoAgendaImpl.setObservacao(getObservacao());
		eventoAgendaImpl.setVersao(getVersao());
		eventoAgendaImpl.setStatus(getStatus());
		eventoAgendaImpl.setStatusByUserId(getStatusByUserId());
		eventoAgendaImpl.setStatusByUserName(getStatusByUserName());
		eventoAgendaImpl.setStatusDate(getStatusDate());
		eventoAgendaImpl.setClassNameId(getClassNameId());
		eventoAgendaImpl.setClassPK(getClassPK());

		eventoAgendaImpl.resetOriginalValues();

		return eventoAgendaImpl;
	}

	@Override
	public int compareTo(EventoAgenda eventoAgenda) {
		int value = 0;

		value = getEventoNome().compareTo(eventoAgenda.getEventoNome());

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getDataEvento(), eventoAgenda.getDataEvento());

		if (value != 0) {
			return value;
		}

		value = getHoraEvento().compareTo(eventoAgenda.getHoraEvento());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventoAgenda)) {
			return false;
		}

		EventoAgenda eventoAgenda = (EventoAgenda)obj;

		long primaryKey = eventoAgenda.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventoAgendaModelImpl eventoAgendaModelImpl = this;

		eventoAgendaModelImpl._originalUuid = eventoAgendaModelImpl._uuid;

		eventoAgendaModelImpl._originalCompanyId = eventoAgendaModelImpl._companyId;

		eventoAgendaModelImpl._setOriginalCompanyId = false;

		eventoAgendaModelImpl._originalGroupId = eventoAgendaModelImpl._groupId;

		eventoAgendaModelImpl._setOriginalGroupId = false;

		eventoAgendaModelImpl._originalDataEvento = eventoAgendaModelImpl._dataEvento;

		eventoAgendaModelImpl._originalUserResponsavelId = eventoAgendaModelImpl._userResponsavelId;

		eventoAgendaModelImpl._setOriginalUserResponsavelId = false;

		eventoAgendaModelImpl._originalUserResponsavelNome = eventoAgendaModelImpl._userResponsavelNome;

		eventoAgendaModelImpl._originalEventoId = eventoAgendaModelImpl._eventoId;

		eventoAgendaModelImpl._setOriginalEventoId = false;

		eventoAgendaModelImpl._originalEventoNome = eventoAgendaModelImpl._eventoNome;

		eventoAgendaModelImpl._originalLocalId = eventoAgendaModelImpl._localId;

		eventoAgendaModelImpl._setOriginalLocalId = false;

		eventoAgendaModelImpl._originalLocalNome = eventoAgendaModelImpl._localNome;

		eventoAgendaModelImpl._originalStatus = eventoAgendaModelImpl._status;

		eventoAgendaModelImpl._setOriginalStatus = false;

		eventoAgendaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventoAgenda> toCacheModel() {
		EventoAgendaCacheModel eventoAgendaCacheModel = new EventoAgendaCacheModel();

		eventoAgendaCacheModel.uuid = getUuid();

		String uuid = eventoAgendaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventoAgendaCacheModel.uuid = null;
		}

		eventoAgendaCacheModel.eventoAgendaId = getEventoAgendaId();

		eventoAgendaCacheModel.companyId = getCompanyId();

		eventoAgendaCacheModel.groupId = getGroupId();

		eventoAgendaCacheModel.createUserId = getCreateUserId();

		eventoAgendaCacheModel.modifiedUserId = getModifiedUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventoAgendaCacheModel.createDate = createDate.getTime();
		}
		else {
			eventoAgendaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventoAgendaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventoAgendaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date dataEvento = getDataEvento();

		if (dataEvento != null) {
			eventoAgendaCacheModel.dataEvento = dataEvento.getTime();
		}
		else {
			eventoAgendaCacheModel.dataEvento = Long.MIN_VALUE;
		}

		eventoAgendaCacheModel.horaEvento = getHoraEvento();

		String horaEvento = eventoAgendaCacheModel.horaEvento;

		if ((horaEvento != null) && (horaEvento.length() == 0)) {
			eventoAgendaCacheModel.horaEvento = null;
		}

		eventoAgendaCacheModel.qtdeVagas = getQtdeVagas();

		eventoAgendaCacheModel.qtdeVagasPreenchida = getQtdeVagasPreenchida();

		eventoAgendaCacheModel.gratuito = getGratuito();

		eventoAgendaCacheModel.valor = getValor();

		eventoAgendaCacheModel.userResponsavelId = getUserResponsavelId();

		eventoAgendaCacheModel.userResponsavelNome = getUserResponsavelNome();

		String userResponsavelNome = eventoAgendaCacheModel.userResponsavelNome;

		if ((userResponsavelNome != null) &&
				(userResponsavelNome.length() == 0)) {
			eventoAgendaCacheModel.userResponsavelNome = null;
		}

		eventoAgendaCacheModel.eventoId = getEventoId();

		eventoAgendaCacheModel.eventoNome = getEventoNome();

		String eventoNome = eventoAgendaCacheModel.eventoNome;

		if ((eventoNome != null) && (eventoNome.length() == 0)) {
			eventoAgendaCacheModel.eventoNome = null;
		}

		eventoAgendaCacheModel.localId = getLocalId();

		eventoAgendaCacheModel.localNome = getLocalNome();

		String localNome = eventoAgendaCacheModel.localNome;

		if ((localNome != null) && (localNome.length() == 0)) {
			eventoAgendaCacheModel.localNome = null;
		}

		eventoAgendaCacheModel.observacao = getObservacao();

		String observacao = eventoAgendaCacheModel.observacao;

		if ((observacao != null) && (observacao.length() == 0)) {
			eventoAgendaCacheModel.observacao = null;
		}

		eventoAgendaCacheModel.versao = getVersao();

		eventoAgendaCacheModel.status = getStatus();

		eventoAgendaCacheModel.statusByUserId = getStatusByUserId();

		eventoAgendaCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = eventoAgendaCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			eventoAgendaCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			eventoAgendaCacheModel.statusDate = statusDate.getTime();
		}
		else {
			eventoAgendaCacheModel.statusDate = Long.MIN_VALUE;
		}

		eventoAgendaCacheModel.classNameId = getClassNameId();

		eventoAgendaCacheModel.classPK = getClassPK();

		return eventoAgendaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", eventoAgendaId=");
		sb.append(getEventoAgendaId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dataEvento=");
		sb.append(getDataEvento());
		sb.append(", horaEvento=");
		sb.append(getHoraEvento());
		sb.append(", qtdeVagas=");
		sb.append(getQtdeVagas());
		sb.append(", qtdeVagasPreenchida=");
		sb.append(getQtdeVagasPreenchida());
		sb.append(", gratuito=");
		sb.append(getGratuito());
		sb.append(", valor=");
		sb.append(getValor());
		sb.append(", userResponsavelId=");
		sb.append(getUserResponsavelId());
		sb.append(", userResponsavelNome=");
		sb.append(getUserResponsavelNome());
		sb.append(", eventoId=");
		sb.append(getEventoId());
		sb.append(", eventoNome=");
		sb.append(getEventoNome());
		sb.append(", localId=");
		sb.append(getLocalId());
		sb.append(", localNome=");
		sb.append(getLocalNome());
		sb.append(", observacao=");
		sb.append(getObservacao());
		sb.append(", versao=");
		sb.append(getVersao());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("br.com.prodevelopment.lapidarios.evento.model.EventoAgenda");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventoAgendaId</column-name><column-value><![CDATA[");
		sb.append(getEventoAgendaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataEvento</column-name><column-value><![CDATA[");
		sb.append(getDataEvento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>horaEvento</column-name><column-value><![CDATA[");
		sb.append(getHoraEvento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qtdeVagas</column-name><column-value><![CDATA[");
		sb.append(getQtdeVagas());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qtdeVagasPreenchida</column-name><column-value><![CDATA[");
		sb.append(getQtdeVagasPreenchida());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gratuito</column-name><column-value><![CDATA[");
		sb.append(getGratuito());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>valor</column-name><column-value><![CDATA[");
		sb.append(getValor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userResponsavelId</column-name><column-value><![CDATA[");
		sb.append(getUserResponsavelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userResponsavelNome</column-name><column-value><![CDATA[");
		sb.append(getUserResponsavelNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventoId</column-name><column-value><![CDATA[");
		sb.append(getEventoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventoNome</column-name><column-value><![CDATA[");
		sb.append(getEventoNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localId</column-name><column-value><![CDATA[");
		sb.append(getLocalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localNome</column-name><column-value><![CDATA[");
		sb.append(getLocalNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>observacao</column-name><column-value><![CDATA[");
		sb.append(getObservacao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versao</column-name><column-value><![CDATA[");
		sb.append(getVersao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventoAgenda.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EventoAgenda.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _eventoAgendaId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _createUserId;
	private String _createUserUuid;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _dataEvento;
	private Date _originalDataEvento;
	private String _horaEvento;
	private int _qtdeVagas;
	private int _qtdeVagasPreenchida;
	private boolean _gratuito;
	private double _valor;
	private long _userResponsavelId;
	private long _originalUserResponsavelId;
	private boolean _setOriginalUserResponsavelId;
	private String _userResponsavelNome;
	private String _originalUserResponsavelNome;
	private long _eventoId;
	private long _originalEventoId;
	private boolean _setOriginalEventoId;
	private String _eventoNome;
	private String _eventoNomeCurrentLanguageId;
	private String _originalEventoNome;
	private long _localId;
	private long _originalLocalId;
	private boolean _setOriginalLocalId;
	private String _localNome;
	private String _originalLocalNome;
	private String _observacao;
	private String _observacaoCurrentLanguageId;
	private double _versao;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _classNameId;
	private long _classPK;
	private long _columnBitmask;
	private EventoAgenda _escapedModel;
}